2006-12-05  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/Dynamico.h:
	Added get_tring_tvor().

	* Glasses/Tringula.cxx:
	* Glasses/Tringula.h:
	DoBoxPrunning(): added code to find intersection lines for
	triangle pairs obtained via mesh-mesh collision detection; store
	them in 'vector<Float_t> mItsLines' to get them over to renderer.
	This should be chopped-up and somewhat optimised.

	* Rnr/GL/Tringula_GL_Rnr.cxx:
	Added optional rendering of intersection lines.

	* Stones/HTrans.cpp:
	* Stones/HTrans.h:
	Added templated MultiplyVec3() and RotateVec3() for raw TT*.

	* glass.list:
	Whitespace changes.

	* Opcode/Ice/IcePoint.h:
	Renamed Mac() that also adds *this to TMac(), added TMac2() method.

	* Opcode/OPC_TriTriOverlap.h:
	Refit whitespace.

2006-11-30  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/Dynamico.cxx:
	* Glasses/Dynamico.h:
	Use HTransF instead of ZTrans; added support for aa-bbox in
	parent-frame.

	* Glasses/TriMesh.cxx:
	* Glasses/TriMesh.h:
	Added support for aa-bbox calculation.

	* Glasses/Tringula.cxx:
	* Glasses/Tringula.h:
	Added SweepAndPrune function and a switch for dyno-bbox rendering.
	Dynamico now uses HTrans.

	* Rnr/GL/Tringula_GL_Rnr.cxx:
	Added rendering of bounding boxes for dynos.

	* Stones/HTrans.cpp:
	* Stones/HTrans.cxx:
	* Stones/HTrans.h:
	New files; templated homogeneous-4x4-matrix.

	* catalog.patch:
	Specify pragmas for HTrans.

	* Opcode/Ice/IceAABB.h:
	* Opcode/Ice/IceAxes.h:
	* Opcode/Ice/IceMatrix4x4.cpp:
	* Opcode/Ice/IceMatrix4x4.h:
	* Opcode/Ice/IcePairs.h:
	* Opcode/Ice/IcePoint.cpp:
	* Opcode/Ice/IcePoint.h:
	* Opcode/Ice/IceUtils.h:
	* Opcode/OPC_BaseModel.cpp:
	* Opcode/OPC_BaseModel.h:
	* Opcode/OPC_MeshInterface.h:
	* Opcode/OPC_Model.cpp:
	* Opcode/OPC_OBBCollider.cpp:
	* Opcode/OPC_TreeCollider.cpp:
	Formatting changes.

2006-11-13  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/TriMesh.cxx:
	* Glasses/Tringula.cxx:
	* Rnr/GL/Tringula_GL_Rnr.cxx:
	Added missing includes (not needed with pre-compiled headers).

	* Opcode/Ice/IceHPoint.h:
	Added ifdef for cast-to-Point (gcc-3 was complaining about this
	never being used).

2006-11-13  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/TriMesh.cxx:
	Add a cast to avoid warning on 64-bits.

	* Opcode/Ice/IceContainer.cpp:
	* Opcode/Ice/IceContainer.h:
	* Opcode/Ice/IceTypes.h:
	* Opcode/OPC_AABBCollider.cpp:
	* Opcode/OPC_AABBTree.cpp:
	* Opcode/OPC_AABBTree.h:
	* Opcode/OPC_HybridModel.cpp:
	* Opcode/OPC_LSSCollider.cpp:
	* Opcode/OPC_OBBCollider.cpp:
	* Opcode/OPC_OptimizedTree.cpp:
	* Opcode/OPC_OptimizedTree.h:
	* Opcode/OPC_PlanesCollider.cpp:
	* Opcode/OPC_SphereCollider.cpp:
	* Opcode/OPC_SweepAndPrune.cpp:
	* Opcode/OPC_TreeBuilders.cpp:
	* Opcode/OPC_VolumeCollider.cpp:
	Hacked OPCODE to compile on 64-bits; not very pretty.  Introduced
	uxword typedef in IceTypes (unsigned long) to make enoug space for
	pointer/index representation. Not cool ... need to introduce a
	smart memory allocator (preemptive allocation with refit after the
	tree is built) for nodes/boxes and use indices as it was done
	before. But then there is the wole dirty bussines with
	bit-shifting of values and using the lsb to tag a node as used.
	Not something that can be done in one-day (well ... done yes,
	thought through no).

2006-11-12 Matevz Tadel  <matevz.tadel@ijs.si>

	* Opcode/

	Initial import from OPCODE-1.3. I did quite some reformatting
	(most of it automatic) while browsing through the code and trying
	to understand the structure. I started doing this sometime late in
	August.
