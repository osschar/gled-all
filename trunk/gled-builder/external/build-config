# Configuration for distribution building tools

$BinaryBuilds = [ "x86-sarge-gcc4.1.2",
		  "x86-slc4-gcc3.4.6",
		  "x86_64-gentoo-gcc4.2.3",
		  "x86-fc7-gcc4.1.2",
		];

# x86_64-suse9-gcc3.3.1:
# export GLIB_CONFIG=/opt/gnome/bin/glib-config

########################################################################

$ReleaseComment = <<"fnord";
This is pre-release of Gled-1.3.0-pre1.
fnord

$ReleaseComment .= "\nAvailable binary builds:\n\t" .
  join("\n\t", @$BinaryBuilds) . "\n";


$Packalog =
{

 'root' =>
   {
    'homepage'  => "http://root.cern.ch/",
    'comment'   => "OO framework for data analysis and much more\n" .
                   "Released under LGPL-2.1.",

    'configure' => './configure --enable-gsl-shared',
    'build'     => 'make -j8',
    'install'   => 'ROOTSYS=%i/%p/root make install',
    'devnote'   => '--enable-gsl-shared needed for gentoo x86_64 (.a not PIC).'
   },

 'fltk' =>
   {
    'homepage'  => "http://www.fltk.org/",
    'comment'   => "Fast Light ToolKit: a c++ widget library\n" .
                   "Released under FLTK license (mostly GNU LGPL v2)",

    'configure' => 'CXXFLAGS="-fPIC -O2" ./configure --prefix=%i/%p ' .
                   '--enable-shared --enable-threads --enable-xft'
   },

 'fltk-mt' =>
   {
    'homepage'  => "http://www.gled.org/fltk-mt/",
    'comment'   => "A collection of FLTK widgets and utilities.\n" .
                   "Free software ... must keep licenses in source",

    'configure' => './configure --prefix=%i/%p --external=%i/fltk --ucxx=-fPIC'
   },

 'lcms' =>
   {
    'homepage'  => "http://www.littlecms.com/",
    'comment'   => "Little CMS: a small, speed optimized color management engine.",

    'configure' => 'CFLAGS="-O2 -fPIC" ./configure --prefix=%i/%p',

    'postinstall'  => 'cd %i/%p/include; ln -s . lcms'
   },

 'DevIL' =>
   {
    'homepage'  => "http://www.imagelib.org/",
    'comment'   => "Developers Image Library: supports many image operations\n" .
                   "Released under GNU LGPL v2.1",

    'configure' => 'CPPFLAGS="-I%i/lcms/include" CFLAGS="-O2 -fPIC -fgnu89-inline" ' .
                   'LDFLAGS="-L%i/lcms/lib -ljpeg -ltiff -lmng" ' .
                   './configure --prefix=%i/%p',
    'devnote'   => '-fgnu89-inline needed to reduce warnings with gcc4.2.3.\n' .
                   '-ljpeg -ltiff -lmng needed for gentoo.'
   },

 'gts' =>
   {
    'homepage'  => "http://gts.sourceforge.net/",
    'comment'   => "GNU Triangulated Surface Library\n".
                   "Released under GNU LGPL",
    'configure' => 'CXXFLAGS=-O2 CPPFLAGS=-I/usr/include/netpbm ' .
                   './configure --prefix=%i/%p',
    'devnote'   => 'Extra include needed for gentoo.'
   },

 'ehs' =>
   {
    'homepage'  => "http://xaxxon.slackworks.com/ehs/",
    'comment'   => "Embedded HTTP server\n".
                   "Released under GNU LGPL",

    'configure' => 'CXXFLAGS=-O2 CPPFLAGS=-I/usr/kerberos/include ' .
                   './configure --prefix=%i/%p --with-ssl',
    'devnote'   => 'Disabled due to PME, should suck the code into EHS libset.'
   },

 'openal' =>
   {
    'homepage'  => "http://openal.org/",
    'comment'   => "Cross-Platform 3D Audio Library\n".
                   "Released under GNU LGPL",

    'configure' => 'CFLAGS="-fPIC -O2" ./configure --prefix=%i/%p ',
#    'buildsubdir' => "$SYSNAME",
#                   '--enable-vorbis --enable-capture --enable-paranoid-locks',
#    'build'     => 'make',
#    'install'   => 'make install'
   },

 'freealut' =>
   {
    'homepage'  => "http://openal.org/",
    'comment'   => "Cross-Platform 3D Audio Library\n".
                   "Released under GNU LGPL",

    'configure' => 'CPPFLAGS=-I%i/openal/include CFLAGS="-O2 -fPIC" ' .
                   'LDFLAGS=-L%i/openal/lib '.
                   './configure --prefix=%i/%p'
   }
};

# Packages to be built:

$BasePackagesNoRoot =
  [
   "fltk", "fltk-mt",
   "lcms", "DevIL",
   "gts",
   "openal", "freealut",
  ];

$PackagesNoRoot =
  [
   @$BasePackagesNoRoot,
   # "EHS",
  ];   


$BasePackages =
  [
   "root",
   @$BasePackagesNoRoot
  ];

$Packages =
  [
   "root",
   @$PackagesNoRoot
  ];

# Missing: libset-a-log
# Could also hold dependencies for external software

# Libsets to be built

$BaseLibsSets = [ "GledCore", "Geom1", "Numerica", "GTS", "RootGeo", "Audio1", "Var1"];
$LibSets = 
  [ 
   @$BaseLibsSets,
   # "EHS",
  ];

$Metalog =
{
 # External software

 'required_software' =>
   {
    'type'     => 'binary',
    'env'      => '<dir:external>',
    'packages' => [ @$Packages ],
    'libsets'  => [],
    'comment' => "External software packages for GLED distribution.",
    'dirname' => "$EXT_BINDIR",
    'shallow_externals' => 1
   },

 'required_software_no_root' =>
   {
    'type'     => 'binary',
    'env'      => '<dir:external>',
    'packages' => [ @$PackagesNoRoot ],
    'libsets'  => [],
    'comment' => "External software packages for GLED distribution without ROOT.",
    'dirname' => "$EXT_BINDIR",
    'shallow_externals' => 1
   },

 # Gled source

 'gled_base-src' =>
   {
    'type'     => 'source',
    'env'      => "$ENVDIR/gled.tar.gz",
    'packages' => [],
    'libsets'  => [],
    'freetars' => 
    [
     ( map { "$LIBSET_SRCDIR/$_-src.tar.gz" } @$BaseLibSets ),
     ( map { "$DEMODIR/$_.tar.gz" } @$BaseLibSets )
    ],
    'comment' => "Sources of Gled base libsets with demos.",
    'dirname' => "$TOPSRCDIR",
    'symlink' => "gled",
   },

 'gled_all-src' =>
   {
    'type'     => 'source',
    'env'      => "$ENVDIR/gled.tar.gz",
    'packages' => [],
    'libsets'  => [],
    'freetars' =>
    [ 
     ( map { "$LIBSET_SRCDIR/$_-src.tar.gz" } @$LibSets ),
     ( map { "$DEMODIR/$_.tar.gz" } @$LibSets )
    ],
    'comment' => "Sources of all Gled libsets with demos.",
    'dirname' => "$TOPSRCDIR",
    'symlink' => "gled",
   },

 # Gled binaries

 'gled_base' =>
   {
    'type'     => 'binary',
    'env'      => "$ENVDIR/gled.tar.gz",
    'packages' => [],
    'libsets'  => [ @$BaseLibSets ],
    'freetars' => [ map { "$DEMODIR/$_.tar.gz" } @$BaseLibSets ],
    'comment' => "Binary Gled base with demos (no external software).",
    'dirname' => "$TOPBINDIR",
    'symlink' => "gled",
   },

 'gled_base_and_required_software' =>
   {
    'type'     => 'binary',
    'env'      => "$ENVDIR/gled.tar.gz",
    'packages' => [ @$BasePackages ],
    'libsets'  => [ @$BaseLibSets ],
    'freetars' => [ map { "$DEMODIR/$_.tar.gz" } @$BaseLibSets ],
    'comment' => "Binary Gled base with all external software and demos.",
    'dirname' => "$TOPBINDIR",
    'symlink' => "gled",
   },

 'gled_base_and_required_software_no_root' =>
   {
    'type'     => 'binary',
    'env'      => "$ENVDIR/gled.tar.gz",
    'packages' => [ @$BasePackagesNoRoot ],
    'libsets'  => [ @$BaseLibSets ],
    'freetars' => [ map { "$DEMODIR/$_.tar.gz" } @$BaseLibSets ],
    'comment' => "Binary Gled base with all external packages (except ROOT) including demos",
    'dirname' => "$TOPBINDIR",
    'symlink' => "gled",
   },

  'gled_all' =>
   {
    'type'     => 'binary',
    'env'      => "$ENVDIR/gled.tar.gz",
    'packages' => [ @$Packages ],
    'libsets'  => [ @$LibSets ],
    'freetars' => [ map { "$DEMODIR/$_.tar.gz" } @$LibSets ],
    'comment' => "Binary Gled with all libsets, external software and demos.",
    'dirname' => "$TOPBINDIR",
    'symlink' => "gled",
   },
};

$MetaPackages =
 [
  'required_software',
  #'required_software_no_root',

  'gled_base-src',
  #'gled_all-src',

  'gled_base',
  'gled_base_and_required_software',
  #'gled_base_and_required_software_no_root',
  'gled_all'
 ];
