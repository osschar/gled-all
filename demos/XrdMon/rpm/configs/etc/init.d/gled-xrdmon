#!/bin/sh
#
# Init file for the Gled XRootD transfers monitoring daemon
#
# chkconfig: 2345 20 80
# description: reports detailed xrootd information from UDP stream into several backends
#
# pidfile: /var/run/gled/gled-xrdmon.pid

# Source function library.
. /etc/rc.d/init.d/functions
# Source read ini files library
. /etc/gled/functions/read_ini.sh

NAME=gled-xrdmon
DESC="Gled XRootD transfers monitoring"

COLLECTORS_CFG=/etc/gled/collectors.cfg

PID_DIR="/var/run/gled"
LOG_DIR="/var/log/gled"

INIT_ENV="source /opt/gled/gled-env.sh /opt/gled"
DAEMON_BIN="/opt/gled/bin/saturn"

RETVAL=0

# Read list of collectors from configuration file
function _get_collectors_conf() {
    read_ini -c ${COLLECTORS_CFG}
    echo $INI__ALL_SECTIONS
}


# Get the list of running collectors (by pid file)
function _get_collectors_running() {
    local RESULT=""
    local PID_FILE
    for PID_FILE in `ls $PID_DIR | grep -e ".pid$"`;
    do
        local NAME=${PID_FILE%.pid}
        RESULT+="$NAME "
    done

    echo $RESULT
}


# Read options for given collector from configuration file
function _get_collector_options() {
    read_ini -c ${COLLECTORS_CFG}

    local COLLECTOR="$1"
    local PARAMS_LINE=""
    local PREFIX="INI__${COLLECTOR}__"

    local ini_varname
    for ini_varname in `set | grep -e "^${PREFIX}" | cut -f1 -d "="`;
    do
        local varname=${ini_varname#$PREFIX}
        PARAMS_LINE+="$varname=\"${!ini_varname}\" "
    done
    
    echo $PARAMS_LINE
}

# Eval options for starting of given saturn from configuration file
function _eval_listener_start_options()
{
    read_ini -c ${COLLECTORS_CFG}

    local LLL="$1"
    local PREFIX="INI__${LLL}__"
    local LISRE="^LISTENER_"

    local ini_varname
    for ini_varname in `set | grep -e "^${PREFIX}" | cut -f1 -d "="`
    do
        local varname=${ini_varname#$PREFIX}
        if [[ $varname =~ $LISRE ]];
        then
            eval "$varname=\"${!ini_varname}\" "
        fi
    done
}

# get all collectors names (including running but removed from the configuration file)
function _get_all_collectors() {
    local ALL_COLS="$(_get_collectors_running) $(_get_collectors_conf)"
    ALL_COLS=$(for s in $ALL_COLS; do echo $s; done | sort | uniq)
    echo ${ALL_COLS}
}


start() {
    local args=$*
    local COLLECTORS=${args:-$(_get_collectors_conf)}

    local COL
    for COL in ${COLLECTORS};
    do
        echo -n $"Starting $DESC ('$COL'): "
        local PIDFILE="${PID_DIR}/${COL}.pid"
        local LOGFILE="${LOG_DIR}/${COL}.log"

        export LISTENER_LOGFILE="${LOG_DIR}/${COL}-listener.log"
        export LISTENER_SCRIPTS=""

        _eval_listener_start_options $COL

        local OPTS=$(_get_collector_options $COL)

        local DAEMON_COMMAND="${DAEMON_BIN} --daemon  --pidfile ${PIDFILE} --log ${LOGFILE} --outerr = /etc/gled/scripts/xrd_suck_udp.C /etc/gled/scripts/xrd_file_close_reporter_amq.C ${LISTENER_SCRIPTS}"
        local DAEMON="${INIT_ENV} && ${OPTS} ${DAEMON_COMMAND} >>${LOGFILE} 2>&1"

        daemon --user="nobody" --pidfile="${PIDFILE}" $DAEMON
    
        local _RETVAL=$?
        echo
        [ ${_RETVAL} -eq 0 ] && touch /var/lock/subsys/${NAME}_${COL}
        [ ${_RETVAL} -ne 0 ] && RETVAL=${_RETVAL}
    done
  
    return $RETVAL
}


stop() {
    local args=$*
    # get running instances
    local RUNNING=${args:-$(_get_collectors_running)}
  
    local COL
    for COL in ${RUNNING};
    do
        echo -n $"Stopping $DESC ('$COL'): "
        local PIDFILE="${PID_DIR}/${COL}.pid"
        killproc -p "$PIDFILE" $DAEMON_BIN -15
        local _RETVAL=$?
        echo
        rm -f $PIDFILE
        [ $_RETVAL -eq 0 ] && rm -f /var/lock/subsys/${NAME}_${COL}
        [ $_RETVAL -ne 0 ] && RETVAL=$_RETVAL
    done

    return $RETVAL
}


restart() {
    stop $*
    start $*
}

condrestart() {
    local args=$*
    local COLLECTORS=${args:-$(_get_all_collectors)}

    local COL
    for COL in ${COLLECTORS};
    do
        [ -e /var/lock/subsys/${NAME}_${COL} ] && restart $COL
        local _RETVAL=$?
        [ $_RETVAL -ne 0 ] && RETVAL=$_RETVAL
    done

    return $RETVAL
}


_status() {
    local args=$*
    local COLLECTORS=${args:-$(_get_all_collectors)}
    RETVAL=0

    local COL
    for COL in ${COLLECTORS};
    do
        echo -n $"Status of collector '$COL': "
        local PIDFILE="${PID_DIR}/${COL}.pid"

        status -p "$PIDFILE" $DAEMON_BIN
        local _RETVAL=$?
        [ $_RETVAL -ne 0 ] && RETVAL=$_RETVAL
    done

    return $RETVAL
}

# get status of running collectors
_status_running() {
    local RUNNING=$(_get_collectors_running)
    if [ -n "${RUNNING}" ];
    then
        _status ${RUNNING}
        return $?
    else
        return 0
    fi

}


# restart stopped collectors supposed to be running
_recovery_restart() {
    local COL
    for COL in $(_get_collectors_running);
    do
        _status ${COL} >/dev/null 2>&1
        local _RETVAL=$?
        [ ${_RETVAL} -ne 0 ] && echo "Collector '${COL}' is probably crashed, restarting" && restart ${COL}
    done
}


list() {
    local LIST=$(_get_collectors_conf)
    echo "Collectors list from configuration file:"
    local COL
    for COL in $LIST;
    do
        echo $COL
    done
}


COMMAND=$1
shift

case "${COMMAND}" in
    start)
        start $*
        ;;
    stop)
        stop $*
        ;;
    restart)
        restart $*
        ;;
    condrestart)
        condrestart $*
        ;;
    status)
        _status $*
        ;;
    _status_running)
        _status_running
        ;;
    _recovery_restart)
        _recovery_restart
        ;;

    list)
        list
        ;;
    *)
        echo $"Usage: $0 {start|stop|restart|condrestart|status|list} [collector1] ... [collectorN]"
        RETVAL=1
esac

exit $RETVAL

