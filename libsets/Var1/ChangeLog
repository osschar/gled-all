2009-01-14  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/Crawler.cxx:
	* Glasses/Crawler.h:
	* Glasses/Dynamico.cxx:
	* Glasses/Dynamico.h:
	Move member 'Float_t mLevH' from Dynamico to Crawler.

	* Glasses/Flyer.cxx:
	* Glasses/Flyer.h:
	Add data-member 'Float_t mHeight' to record current height.
	Remove old/inactive movement code.

	* Glasses/TringuCam.cxx:
	Differentiate between Crawler and Flyer - they have different
	glgui now.

	* Glasses/Tringula.cxx:
	* Glasses/Tringula.h:
	Place-dyno-on-terrain now takes additional height argument.
	Modify RandomDynamico/Flyer/Chopper() accordingly.

2009-01-12  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/Flyer.cxx:
	Add comment about how flyers should achieve stable convergence
	towards straight flight.

	* Stones/GravPlotter.cxx:
	* Stones/GravPlotter.h:
	Angle function now plots dot product between parametric
	down-direction and direction of gravity (in degrees).
	Increase number of sampling points.

2009-01-11  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/Airplane.cxx:
	* Glasses/Airplane.h:
	* Glasses/Chopper.cxx:
	* Glasses/Chopper.h:
	* Glasses/Crawler.cxx:
	* Glasses/Crawler.h:
	* Glasses/Flyer.cxx:
	* Glasses/Flyer.h:
	New glasses - break up Dynamico for finer control over movement
	parameters and mechanics.

	* Stones/GravData.cxx:
	* Stones/GravData.h:
	New stone - information about gravitational field at given point.

	* Stones/GravPlotter.cxx:
	* Stones/GravPlotter.h:
	New stone - helper for plotting gravitational field functions.

	* Glasses/Dynamico.cxx:
	* Glasses/Dynamico.h:
	Add members for velocity / angular velocity vectors.
	Add member for storing current GravData.
	Implement virtual TimeTick() to do movement.

	* Glasses/Extendio.cxx:
	* Glasses/Extendio.h:
	Subclass from TimeMakerClient.
	Add virtual SetTringula() and Tringula* member.

	* Glasses/PSRectangle.cxx:
	* Glasses/PSRectangle.h:
	* Glasses/PSSphere.cxx:
	* Glasses/PSSphere.h:
	* Glasses/PSTorus.cxx:
	* Glasses/PSTorus.h:
	* Glasses/PSTriangle.cxx:
	* Glasses/PSTriangle.h:
	* Glasses/ParaSurf.cxx:
	* Glasses/ParaSurf.h:
	Add virtual functions:
	  Float_t CharacteristicLength();
	  void    pos2grav(const Float_t* x, GravData& gd);

	* Glasses/Statico.cxx:
	* Glasses/Statico.h:
	Add empty implementation of TimeTick().

	* Glasses/TringuCam.cxx:
	* Glasses/TringuCam.h:
	Add min/max value limits to struct ValueInfo.

	* Glasses/Tringula.cxx:
	* Glasses/Tringula.h:
	In functions for creating dynos use the new sub-classes.
	Remove code for handling od dyno time-steps - now in individual
	classes.
	Remove obsolete function SetEdgePlanes().
	Add function Bool_t CheckBoundaries() to determine safe distance
	for a given dynamico before hitting a tringula related boundary.

	* Stones/HTrans.cpp:
	* Stones/HTrans.h:
	Make HPointF/D are now classes, not typedefs.

	* catalog.patch:
	Extendio now abstract.
	HPointF/D are now classes, not typedefs.

	* glass.list:
	Register new stones.

	* Opcode/Ice/IceMatrix3x3.cpp:
	* Opcode/Ice/IceMatrix3x3.h:
	Add function FromTo(point1, point2) to calculate rotation matrix
	for rotating point1 into point2.

	* Opcode/Ice/IceMatrix4x4.cpp:
	* Opcode/Ice/IceMatrix4x4.h:
	* Opcode/Ice/IcePoint.h:
	New helper functions, comments.	

2008-12-28  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/TriMesh.cxx:
	* Glasses/TriMesh.h:
	Add function extrude_triangle().
	Add function make_tetra_blade() for creation of individual
	tetrahedrons.
	Add function MakeTetraChopper() to create a dragon-fly like flyer.
	
	* Glasses/Tringula.cxx:
	* Glasses/Tringula.h:
	Add function RandomChopper().

2008-12-28  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/TriMesh.cxx:
	* Glasses/TriMesh.h:
	* Glasses/Tringula.cxx:
	* Glasses/Tringula.h:
	Modified files.

2008-10-13  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/SolarSystem.cxx:
	Call CosmicBall::ResizeHistory() when adding the ball into the
	balls container so that they are in sync with the settings of the
	SolarSystem.

2008-10-03  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/CosmicBall.h:
	* Glasses/CosmicBall.cxx:
	* Glasses/SolarSystem.h:
	* Glasses/SolarSystem.cxx:
	Add support for setting desired-radius for each cosmic-ball.
	Solar-system then exponentially translates the ball to the desired
	orbit.
	This only works in direct-step integration mode.

2008-10-02  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/SolarSystem.cxx:
	* Glasses/SolarSystem.h:
	During update of ball positions in direct-step mode one should
	also loop over empty ball-slots to stay in sync with the internal
	state-vector of the ODE crawler.

	Add member 'ZColor mPlanetColor'.

2008-09-30  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/SolarSystem.cxx:
	* Glasses/SolarSystem.h:
	Implement another integration mode, controlled with 'CrawlMode_e
	mCrawlMode' which can be CM_ChunkedStorage (old one, still
	default) or CM_DirectStep (do the time step in parallel with
	rendering, still in a dedicated thread).

	CM_DirectStep allows magickal things to happen to the
	solar-system, like planets popping out of nowhere, disapearing
	into void or simply being victims to unexplainable forces. In
	short ... badly needed for the AliEn visualization demo.

2008-09-24  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/CosmicBall.cxx:
	* Glasses/CosmicBall.h:
	* Glasses/SolarSystem.cxx:
	* Rnr/GL/CosmicBall_GL_Rnr.cxx:
	In CosmicBall use vector<Point> instead of list<Point> for storage
	of ball history. Nitpicking to avoid memory fragmentation.


2008-09-23  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/SolarSystem.cxx:
	* Glasses/SolarSystem.h:
	Put ODE integration in a dedicated thread with increased nice.
	Do management of storage chunks with given time interval for the
	future and past.

	* Glasses/CosmicBall.cxx:
	* Glasses/CosmicBall.h:
	Add struct Point for storage of the history tail.

	* Rnr/GL/CosmicBall_GL_Rnr.cxx:
	* Rnr/GL/CosmicBall_GL_Rnr.h:
	Implement PostDraw() and render tail of the cosmic ball (if stored
	in the master lens).

2008-08-11  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/SolarSystem.cxx:
	* Glasses/SolarSystem.h:
	Implement ODEMaster virtuals.
	Add inheritance from TimeMakerClient and implement TimeTick().
	Cosmic balls now wander around.

	* Rnr/GL/SolarSystem_GL_Rnr.h:
	Whitespace.

2008-07-27  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/CosmicBall.cxx:
	* Glasses/CosmicBall.h:
	* Glasses/SolarSystem.cxx:
	* Glasses/SolarSystem.h:
	* Rnr/GL/CosmicBall_GL_Rnr.cxx:
	* Rnr/GL/CosmicBall_GL_Rnr.h:
	* Rnr/GL/SolarSystem_GL_Rnr.cxx:
	* Rnr/GL/SolarSystem_GL_Rnr.h:
	* glass.list:
	New proto glasses SolarSystem and CosmicBall for
	generation/simulation of a solar system.

2008-06-17  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/TriMesh.cxx:
	* Glasses/TriMesh.h:
	Add inner public structure VertexVisitor (and its sub-class
	VertexVisitorMaxDist) that together with a new member-function
	VisitVertices() allow for somewhat painless interation over
	vertices with custom acceptance condition and operation performed
	for each vertex.

	* Glasses/TriMeshField.cxx:
	* Glasses/TriMeshField.h:
	Use TriMesh::VisitVertices() for FillByGaussBlobs().
	Add method UpdateMinMaxField(set<Int_t> vertices) allowing update
	of global min/max values from specified vertices only.

	* Glasses/TringuCam.cxx:
	Use TriMesh::VisitVertices() for field spraying.

2008-05-26  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/PSSphere.cxx:
	* Glasses/PSSphere.h:
	* Glasses/ParaSurf.cxx:
	* Glasses/ParaSurf.h:
	Add some docs.

	* Glasses/TriMesh.cxx:
	* Glasses/TriMesh.h:
	Added functions:
	Bool_t FindPointFromFGH(const Float_t fgh[3], ...);
	Int_t  FindClosestVertex(Int_t triangle, const Float_t xyz[3],...);

	* Glasses/TriMeshField.cxx:
	* Glasses/TriMeshField.h:
	Rename FillByXYGaussBlobs() to FillByGaussBlobs() and fix it.
	Before it was really just using x and y coordinates in scene space.
	Now it generates the blob positions by using parametric surface
	f,g coordinates and is thus suitable for any topology.
	
	* Glasses/TringuCam.cxx:
	* Glasses/Tringula.cxx:
	Minor changes.

2008-05-24  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/ParaSurf.h:
	Add functions GetMin/MaxFGH(Float_t fgh[3]).

	* Glasses/TriMesh.cxx:
	* Glasses/TriMesh.h:
	* Glasses/Tringula.cxx:
	* Glasses/Tringula.h:
	Moved functions ColorByCoord/Normal[Formula] from Tringula to
	TriMesh.

	Added functions ColorByParaSurfCoord/Normal to TriMesh.

	Removed link-member RGBAPalette from Tringula.

	* Glasses/TriMeshField.cxx:
	* Glasses/TriMeshField.h:
	In FillByXYGaussBlobs() use gRandom instead of local TRandom(0).

	* Glasses/TringuCam.cxx:
	* Glasses/TringuCam.h:
	Clean-up the hack for two tube-types, use callback-arguments that
	are now available from WGlButton to steer new-tube creation.

	Added methods for terrain mesh colorization:
	- void SetAndApplyCurField(TriMeshField* field);
	- void ColorByTerrainProps(Int_t mode=0);

2008-05-18  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/Extendio.h:
	Whitespace.

	* Glasses/TringuCam.cxx:
	* Glasses/TringuCam.h:
	Make connection tube in the TringuCam.
	Hack in two different connect methods so that the demo looks more
	interesting.

	* Glasses/Tringula.cxx:
	* Glasses/Tringula.h:
	Remove method ConnectStaticos() as it did not belong here (now
	done in TringuCam).

2008-04-22  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/TringuCam.cxx:
	* Glasses/TringuCam.h:
	Add a hacky way to handle requests for connecting two statos from
	the overlay.

2008-04-21  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/Statico.cxx:
	* Glasses/Statico.h:
	Add member 'Int_t  mNDynoColls', mostly to have something to show
	in the stato-overlay.

	* Glasses/TringuCam.cxx:
	* Glasses/TringuCam.h:
	Add menu / dyno / stato view handling functions.

	* Glasses/Tringula.cxx:
	* Glasses/Tringula.h:
	* Rnr/GL/Tringula_GL_Rnr.cxx:
	Add member 'ZColor mSelColor' for marking selected extendios.

	Add method 'void ConnectStaticos()' to build a tube among two
	staticos.

	In TimeTick() descend into all children that are
	TimeMakerClients. Temporary fix for tube animation.

	* Stones/HTrans.h:
	Add cast operators to TT*, const TT*.
	Add const version of PtrBaseVec() method.

2008-04-13  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/Dynamico.h:
	Last aabb was not updated properly.

	* Glasses/Extendio.cxx:
	* Glasses/Extendio.h:
	Add member 'Bool_t bSelected'.

	* Glasses/Tringula.cxx:
	* Glasses/Tringula.h:
	Add inner struct PickResult.
	Add member PickExtendios() that uses Opcode for ray-extendio
	intersections.

	* Glasses/TringuCam.cxx:
	* Glasses/TringuCam.h:
	Add 'ZLink<ZHashList> mSelection', 'ZLink<Scene> mOverlay'.
	Add mouse-action MA_PickExtendios and implement it in
	MouseDown().
	MouseDown() now takes 'A_Rnr::Fl_Event& ev' as an argument.

	* Rnr/GL/TringuCam_GL_Rnr.cxx:
	* Rnr/GL/Tringula_GL_Rnr.cxx:
	Render selected extendios with green bounding-box.

	* Opcode/Ice/IceAABB.h:
	Add some functions.

2008-04-01  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/Dynamico.cxx:
	* Glasses/Dynamico.h:
	Add handle_collision(...) for dyno-dyno collision.
	Make both handle_collision() methods static.

	* Glasses/Tringula.cxx:
	Use proper dyno-dyno collision with momentum / energy
	conservation.

	* Glasses/TriMesh.cxx:
	* Glasses/TriMesh.h:
	Add method SetMassFromBBox(): allows easy faking of mesh's mass
	based on bounding box and surface / height fractions.

2008-03-24  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/Extendio.cxx:
	* Glasses/Extendio.h:
	Added member pointers 'HTransF* mLastTransPtr' and 'Opcode::AABB*
	mLastAABBPtr' to allow accessing of these members without virtual
	calls.

	Added inner class CollisionSegments to facilitate
	collision handling.

	* Glasses/Dynamico.cxx:
	* Glasses/Dynamico.h:
	Added members 'HTransF mLastTrans' and 'Opcode::AABB mLastAABB'.
	These will:
	- allow rendering to be done in parallel with collision detection;
	- provide last position that will be needed for exact collision
	  time determination.

	Added member function handle_collision() that performs simplified
	collision handling for a dynamico.

	* Glasses/ParaSurf.cxx:
	* Glasses/PSSphere.cxx:
	* Glasses/PSTriangle.cxx:
	* Glasses/PSTorus.cxx:
	* Glasses/PSRectangle.cxx:
	Cosmetics.

	* Glasses/TriMesh.cxx:
	* Glasses/TriMesh.h:
	Add preliminary members for mass, surface, center-of-mass and
	angular momentum.
	Add function SetMassAndSpeculate() that allows setting of mass and
	calculation of derived quantities by assuming certain fraction of
	mass is on the shell and the rest is in the COM.

	* Glasses/TringuCam.cxx:
	Fix orto-normalization order so that forward direction is less
	affected.
	
	* Glasses/Tringula.cxx:
	* Glasses/Tringula.h:
	Perform dyno-stato and dyno-dyno collision detection and handling
	on each time-tick.
	Dyno-stato is mostly ok, using the simplest algorithm i could
	think of.
	Dyno-dyno uses the same algorith as dyno-stato and is thus a bit
	awkward. This will be fixed soon.

	* Rnr/GL/Tringula_GL_Rnr.cxx:
	Use last transformation/aabbox from dynamicos.

	* Stones/HTrans.cpp:
	* Stones/HTrans.h:
	Add HPoint template class and typedef HPointF, HPointD.
	These are minimal implementations of streamable 3d points.

	* catalog.patch:
	Add pragmas for HPointF/D classes.

	* Opcode/Ice/IceAABB.h:
	Added GetX/Y/ZSize() functions to complement
	GetDepth/Width/Breadth which are ICE specific due to choice of y
	as up direction.

	* Opcode/Ice/IcePoint.h:
	Added operator[](int) to access components by index.

	* Opcode/OPC_RayCollider.h:
	Added GetDestination().

2008-02-03  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/Extendio.cxx:
	* Glasses/Extendio.h:
	Add static methods intersect_triangle() and intersect_extendios().
	These now hold code for detailed inspection of mesh-mesh collision
	status.

	* Glasses/PSSphere.cxx:
	In random_fgh() phi and theta were swapped.

	* Glasses/Tringula.cxx:
	* Glasses/Tringula.h:
	* Rnr/GL/Tringula_GL_Rnr.cxx:
	Move code for detailed collision detection from DoBoxPruning()
	functions into static functions in Extendio.
	The intersections are now stored in vector<Opcode::Segment>.

	* Opcode/OPC_TriTriOverlap.h:
	Realign for readibility.

2008-01-28  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/Extendio.h:
	* Glasses/Statico.h:
	Make Tringula a friend.
	Return const& to aa-bbox.

	* Glasses/PSSphere.cxx:
	Fix a bug in pos2fgh(), theta was not calculated correctly.

	* Glasses/TriMesh.cxx:
	BuildOpcStructs(): throw an exception if build fails.

	* Glasses/TringuCam.cxx:
	* Glasses/TringuCam.h:
	Add 'Float_t fHeight' data-member and honour it when correcting
	the up-direction of camera. Until now the height was not constant
	for curved surfaces, especially when moving very fast.

	* Glasses/Tringula.cxx:
	* Glasses/Tringula.h:
	Implement split box-pruning, separating static and dynamic
	objects.
	When placing a random statico on the terrain use the static list
	for box-pruning and then do mesh-mesh tests. Before only
	inefficient, O(n) aa-bbox tests were done. So, now it is faster
	and correct.

	* Opcode/OPC_BoxPruning.cpp:
	* Opcode/OPC_BoxPruning.h:
	Implemented class BipartiteBoxPruner. This helps in management and
	utilization of two object lists for box-pruning. One is meant for
	static objects and other for dynamic ones.

2008-01-23  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/Dynamico.cxx:
	* Glasses/Dynamico.h:
	* Glasses/Extendio.cxx:
	* Glasses/Extendio.h:
	* Glasses/Statico.cxx:
	* Glasses/Statico.h:
	Split dynamico into sub-class Extendio and derived Statico from
	that as well.

	* Glasses/PSMark.cxx:
	* Glasses/PSMark.h:
	* Rnr/GL/PSMark_GL_Rnr.cxx:
	* Rnr/GL/PSMark_GL_Rnr.h:
	New class: mark a point/area on a ParaSurf.

	* Glasses/PSRectangle.cxx:
	* Glasses/PSRectangle.h:
	* Glasses/PSSphere.cxx:
	* Glasses/PSSphere.h:
	* Glasses/PSTorus.cxx:
	* Glasses/PSTorus.h:
	* Glasses/PSTriangle.cxx:
	* Glasses/PSTriangle.h:
	* Glasses/ParaSurf.cxx:
	* Glasses/ParaSurf.h:
	Added some functions:
	- surface(),
	- origin_fgh/pos/trans,
	- fgh2trans (to HTrans and ZTrans),
	- regularize_fg;
	- random_trans().
	Fixed a problem with pos2 calculation in PSTorus and PSSphere.

	* Glasses/TriMesh.cxx:
	* Glasses/TriMesh.h:
	Added convenience functions for creation of simple meshes, like
	MakeBox() and MakeTetraFlyer().
	Added data-members 'Float_t mVolume, mXYArea'.

	* Glasses/TringuCam.cxx:
	* Glasses/TringuCam.h:
	Add GL-dump for fwd/bck, up/down speeds.

	* Glasses/Tringula.cxx:
	* Glasses/Tringula.h:
	Added functions to create RandomStatico/Flyers().
	Improved placement on terrain.

	* Rnr/GL/TringuCam_GL_Rnr.cxx:
	* Rnr/GL/TringuCam_GL_Rnr.h:
	Removed Pre/PostDraw(), let ZNode_GL_Rnr do its stuff.

	* Rnr/GL/Tringula_GL_Rnr.cxx:
	* Rnr/GL/Tringula_GL_Rnr.h:
	Modularize, added rendering of flyers and statos.

	* Stones/HTrans.cpp:
	* Stones/HTrans.h:
	Added Transpose().

	* glass.list:
	Register glasses Extendio, Statico and PSMark.

	* Opcode/Ice/IcePoint.h:
	Fix Point::TMac2(...) to have consistent signature.

	* Opcode/Ice/IceAABB.h:
	* Opcode/Ice/IceMatrix3x3.cpp:
	* Opcode/Ice/IceMatrix4x4.cpp:
	* Opcode/Ice/IceOBB.cpp:
	* Opcode/OPC_RayCollider.cpp:
	* Opcode/OPC_SweepAndPrune.cpp:
	Some comments, formatting, whitespace.

2007-08-16  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/Dynamico.cxx:
	* Glasses/Dynamico.h:
	Grayspace.

	* Glasses/PSRectangle.cxx:
	* Glasses/PSRectangle.h:
	* Glasses/PSSphere.cxx:
	* Glasses/PSSphere.h:
	* Glasses/PSTorus.cxx:
	* Glasses/PSTorus.h:
	* Glasses/PSTriangle.cxx:
	* Glasses/PSTriangle.h:
	* Glasses/ParaSurf.cxx:
	* Glasses/ParaSurf.h:
	New classes for description of parametrized surfaces.

	* Glasses/TriMesh.cxx:
	* Glasses/TriMesh.h:
	Reimplemented VertexData and introduced EdgeData structure; now
	vertices sharing an edge point to the same data.
	Algorithm for construction of connectivity data was changed as well.

	* Glasses/TriMeshField.cxx:
	PartiallyColorizeTvor(): optimize mesh trianlge recoloring;
	Diffuse(): use new EdgeData structures.

	* Glasses/Tringula.cxx:
	* Glasses/Tringula.h:
	Added mParaSurf data-member, PlaceAboveTerrain() method;
	use para-surf to get up-direction and edge-planes.

	* Glasses/TringuCam.cxx:
	* Glasses/TringuCam.h:
	* Rnr/GL/TringuCam_GL_Rnr.cxx:
	Use ptr instead of ref for cam-fix; use new EdgeData structures
	during mesh painting.

	* catalog.patch:
	Flag ParaSurf as virtual base.

	* glass.list:
	Added ParaSurf and derived classes.

	* Opcode/Ice/IceFPU.h:
	Whitespace.

	* Opcode/Ice/IcePoint.h:
	Rename Msc to TMsc to expose the fact it subtracts from *this.

2007-07-06  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/TriMeshField.cxx:
	Fix for root-5.16.00.

2007-03-30  Matevz Tadel  <matevz.tadel@ijs.si>

	* Makefile:
	Replace make with ${MAKE} for Opcode descend.

2007-03-30  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/Dynamico.cxx:
	* Glasses/TriMesh.cxx:
	* Glasses/TriMeshField.cxx:
	* Glasses/TriMeshLightField.cxx:
	* Glasses/TringuCam.cxx:
	* Glasses/Tringula.cxx:
	* Rnr/GL/TringuCam_GL_Rnr.cxx:
	Changes for root-5-15-04 (increased modularity).

	* Opcode/OPC_HybridModel.cpp:
	* Opcode/OPC_Model.cpp:
	* Opcode/Opcode.cpp:
	* Opcode/Opcode.h:
	Removed 'define Log' and replaced all occurrences with printf.

2007-02-25  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/TriMeshField.cxx:
	* Glasses/TriMeshField.h:
	Added a flag controlling tring-color recreation to
	tvor-colorization functions.

	* Glasses/TriMeshLightField.cxx:
	* Glasses/TriMeshLightField.h:
	Implemented cacluclation of ligt-map (including shadows, of
	course) for positional and directional light.

	* Glasses/TringuCam.cxx:
	* Glasses/TringuCam.h:
	* Rnr/GL/TringuCam_GL_Rnr.cxx:
	Added link to TriMeshLightField and proper handling in AddField()
	so that shades are properly cast after spraying/adding field.
	Disable/enable display-list caching for Tringula during
	field-spray.
	Added members controlling verbosity of mouse/key events.	

	* Glasses/Tringula.cxx:
	* Glasses/Tringula.h:
	* Rnr/GL/Tringula_GL_Rnr.cxx:
	Added 'Bool_t bLightMesh' controlling whether ligtning is on
	during mesh rendering. When light-map is applied it should be off.

2007-02-13  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/Tringula.cxx:
	* Glasses/Tringula.h:
	Added methods to color the mesh by coordinate/normal values;
	canonization of interface.

	* Glasses/TriMesh.cxx:
	* Glasses/TriMesh.h:
	Added per-vertex spread and surface (summed by edge); canonization
	of interface.

	* Glasses/TringuCam.cxx:
	* Glasses/TringuCam.h:
	Added mouse-handling and mesh-spraying stuff; added members to
	hold render-state parameters needed for user-input handling
	(copied over by gl-rnr).

	* Rnr/GL/TringuCam_GL_Rnr.cxx:
	Moved most of the mouse handling to the glass; copy relevant
	render-state parameters to glass in Draw() method.

	* Rnr/GL/Tringula_GL_Rnr.cxx:
	* Rnr/GL/Tringula_GL_Rnr.h:
	Added member mMeshTringStamp to properly rebuild display-list when
	the mesh changes.

	* Glasses/TriMeshField.cxx:
	* Glasses/TriMeshField.h:
	New glass: representation of a field that takes arbitrary values
	on each mesh vertex.

	* Glasses/TriMeshLightField.cxx:
	* Glasses/TriMeshLightField.h:
	New glass: specialization of TriMeshField for calculation/storage
	of light-maps and shade-maps; not implemented yet.

	* glass.list:
	Register new glasses TriMeshField and TriMeshLightField.

	* Opcode/OPC_RayCollider.cpp:
	* Opcode/OPC_RayCollider.h:
	Add some notes.

2007-01-09  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/TriMesh.cxx:
	* Glasses/TriMesh.h:
	Added structures to hold vertex-connectivity data and method to
	build them.

	* Glasses/Tringula.cxx:
	* Glasses/Tringula.h:
	Replace ray-direction variables with TVector3.

	* Rnr/GL/Tringula_GL_Rnr.cxx:
	Follow changes in TringTvor_GL_Rnr.

	* Glasses/TringuCam.cxx:
	* Glasses/TringuCam.h:
	* Rnr/GL/TringuCam_GL_Rnr.cxx:
	* Rnr/GL/TringuCam_GL_Rnr.h:
	New files, camera/event-handler for tringula observation.

	* glass.list:
	Register new glass TringuCam.

	* Stones/HTrans.cpp:
	* Stones/HTrans.h:
	Added method MultiplyVec3IP().

	* Opcode/Ice/IcePoint.h:
	Added ctor from double array.

2006-12-05  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/Dynamico.h:
	Added get_tring_tvor().

	* Glasses/Tringula.cxx:
	* Glasses/Tringula.h:
	DoBoxPrunning(): added code to find intersection lines for
	triangle pairs obtained via mesh-mesh collision detection; store
	them in 'vector<Float_t> mItsLines' to get them over to renderer.
	This should be chopped-up and somewhat optimised.

	* Rnr/GL/Tringula_GL_Rnr.cxx:
	Added optional rendering of intersection lines.

	* Stones/HTrans.cpp:
	* Stones/HTrans.h:
	Added templated MultiplyVec3() and RotateVec3() for raw TT*.

	* glass.list:
	Whitespace changes.

	* Opcode/Ice/IcePoint.h:
	Renamed Mac() that also adds *this to TMac(), added TMac2() method.

	* Opcode/OPC_TriTriOverlap.h:
	Refit whitespace.

2006-11-30  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/Dynamico.cxx:
	* Glasses/Dynamico.h:
	Use HTransF instead of ZTrans; added support for aa-bbox in
	parent-frame.

	* Glasses/TriMesh.cxx:
	* Glasses/TriMesh.h:
	Added support for aa-bbox calculation.

	* Glasses/Tringula.cxx:
	* Glasses/Tringula.h:
	Added SweepAndPrune function and a switch for dyno-bbox rendering.
	Dynamico now uses HTrans.

	* Rnr/GL/Tringula_GL_Rnr.cxx:
	Added rendering of bounding boxes for dynos.

	* Stones/HTrans.cpp:
	* Stones/HTrans.cxx:
	* Stones/HTrans.h:
	New files; templated homogeneous-4x4-matrix.

	* catalog.patch:
	Specify pragmas for HTrans.

	* Opcode/Ice/IceAABB.h:
	* Opcode/Ice/IceAxes.h:
	* Opcode/Ice/IceMatrix4x4.cpp:
	* Opcode/Ice/IceMatrix4x4.h:
	* Opcode/Ice/IcePairs.h:
	* Opcode/Ice/IcePoint.cpp:
	* Opcode/Ice/IcePoint.h:
	* Opcode/Ice/IceUtils.h:
	* Opcode/OPC_BaseModel.cpp:
	* Opcode/OPC_BaseModel.h:
	* Opcode/OPC_MeshInterface.h:
	* Opcode/OPC_Model.cpp:
	* Opcode/OPC_OBBCollider.cpp:
	* Opcode/OPC_TreeCollider.cpp:
	Formatting changes.

2006-11-13  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/TriMesh.cxx:
	* Glasses/Tringula.cxx:
	* Rnr/GL/Tringula_GL_Rnr.cxx:
	Added missing includes (not needed with pre-compiled headers).

	* Opcode/Ice/IceHPoint.h:
	Added ifdef for cast-to-Point (gcc-3 was complaining about this
	never being used).

2006-11-13  Matevz Tadel  <matevz.tadel@ijs.si>

	* Glasses/TriMesh.cxx:
	Add a cast to avoid warning on 64-bits.

	* Opcode/Ice/IceContainer.cpp:
	* Opcode/Ice/IceContainer.h:
	* Opcode/Ice/IceTypes.h:
	* Opcode/OPC_AABBCollider.cpp:
	* Opcode/OPC_AABBTree.cpp:
	* Opcode/OPC_AABBTree.h:
	* Opcode/OPC_HybridModel.cpp:
	* Opcode/OPC_LSSCollider.cpp:
	* Opcode/OPC_OBBCollider.cpp:
	* Opcode/OPC_OptimizedTree.cpp:
	* Opcode/OPC_OptimizedTree.h:
	* Opcode/OPC_PlanesCollider.cpp:
	* Opcode/OPC_SphereCollider.cpp:
	* Opcode/OPC_SweepAndPrune.cpp:
	* Opcode/OPC_TreeBuilders.cpp:
	* Opcode/OPC_VolumeCollider.cpp:
	Hacked OPCODE to compile on 64-bits; not very pretty.  Introduced
	uxword typedef in IceTypes (unsigned long) to make enoug space for
	pointer/index representation. Not cool ... need to introduce a
	smart memory allocator (preemptive allocation with refit after the
	tree is built) for nodes/boxes and use indices as it was done
	before. But then there is the wole dirty bussines with
	bit-shifting of values and using the lsb to tag a node as used.
	Not something that can be done in one-day (well ... done yes,
	thought through no).

2006-11-12 Matevz Tadel  <matevz.tadel@ijs.si>

	* Opcode/

	Initial import from OPCODE-1.3. I did quite some reformatting
	(most of it automatic) while browsing through the code and trying
	to understand the structure. I started doing this sometime late in
	August.
