.TH gforge 1 "May 18 1996  ver 1.3"
.IX gforge
.IX fractals
.IX landscapes
.IX textures
.SH NAME
gforge - fractal forgery of landscapes and textures
.SH SYNOPSIS
.na
.nh
.B gforge
'in +9n
.RB [ -mesh
.IR size ]
.RB [ -dimension
.IR  dim 
.RB [ -adim 
.IR dim
.IR scale ] ]
.RB [ -power
.IR factor ]
.RB [ -limit
.IR low 
.IR high ]
.RB [ -peak
.IR xpos
.IR ypos ]
.RB [ -craters
.IR [density 
.IR height] ]
.RB [ -seed
.IR seed ]
.RB [ -name
.IR filename ]
.RB [ -bpfilter
.IR cent_freq
.IR Q ]
.RB [ -brfilter
.IR cent_freq
.IR Q ]
.RB [ -lpfilter
.IR cut_freq
.IR Order ]
.RB [ -hpfilter
.IR cut_freq
.IR Order ]
.RB [ -version ]
.in -9n
.ad
.hy
.SH DESCRIPTION
.B gforge
generates a landscape texture by "random fractal forgery," the term
coined by Richard F. Voss of the IBM Thomas J. Watson Research Center for
seemingly realistic pictures of natural objects generated by simple
algorithms embodying randomness and fractal self-similarity.  The
techniques used by
.B gforge
are essentially those given by Voss[1], particularly the technique of
spectral synthesis explained in more detail by Dietmar Saupe[2]. The source
code (and this man page) was mostly taken from the "ppmforge" module[3] in
the PBMPLUS package of graphics utilities. The gforge "crater" option was
contributed by Heiko Eissfeldt <heiko@colossus.escape.de>.
.PP
The generation of a landscape begins with the preparation of an
array of random data in the frequency domain.  The size of this
array, the "mesh size," can be set with the
.B -mesh
option; the larger the mesh the more realistic the pictures but the
calculation time and memory requirement increases as the square of the mesh
size.  The degree of roughness, which you can specify with the
.B -dimension
option, determines whether the resulting terrain is rolling hills or jagged
mountins. As the dimension value is increased, more high frequency
components are added into the random mesh. (Note that this number does NOT
directly correspond to a conventional 'fractal' dimension, eg. a Hausdorff-
Besicovich dimension. All gforge surfaces have a 'fractal dimension' near
2.0.)
.PP
You may apply a band-pass and/or band-reject filter to the frequency data,
specifying the normalized [0..1] center frequency and Q (sharpness) of each
filter. Lowpass and highpass filters are also available.  Then an inverse
Fourier transform is performed upon it, which converts the original random
frequency domain data into spatial amplitudes.  We scale the real
components that result from the Fourier transform into numbers from 0 to 1
associated with each point on the mesh.  You can further modify this number
by applying a "power law scale" to it with the
.B -power
option.  Unity scale leaves the numbers unmodified; a power scale of 0.5
takes the square root of the numbers in the mesh, while a power scale of 3
replaces the numbers in the mesh with their cubes.  Powers less than 1
yield landscapes with vertical scarps that look like glacially-carved
valleys (with -limit -1.0 1.0); powers greater than one make fairy-castle
spires (which require large mesh sizes for best results). Craters, if that
option is selected, are added at this point. After these calculations, we
have an array of the specified size containing numbers that range from 0 to
1. Six output formats are available as described below.
.PP
Invoking the program with no options writes a 128x128 TGA file called
"output.tga" which looks like a somewhat bumpy hillside (in POV
anyway... being a special format, it will look like green speckled noise in
a standard viewer).  "gforge -help" tells you briefly what options are
available.  You can abbreviate keywords also. Try
.nf

gforge -t pg8 -pow 1 -dim 4 -n sand.pgm

.fi
for an image of sand, or 
.nf

gforge -type tga -pow 1.8 -dim 2.4 -m 400 -n mountain.tga

.fi

for a mountain range to render with POV. Getting your landscape to look
just right will require playing around with the -dimension and -power
specs.

.SH OPTIONS 
.TP 
.BI -mesh " meshsize" 

The size of the (n x n) IFFT (inverse fast-fourier transform) matrix.  To
prevent the IFFT from becoming a _slow_ fourier transform, it is suggested
that the mesh size be a power of two, but you can choose any number you
want. If it happens to have a large prime factor, or be itself a prime
number, the IFFT calculation will be considerably slowed.  The default
meshsize is 128.  Note that a mesh size of 1024 will require just over 8
megabytes of memory.

.TP
.BI -dimension " dim"
Sets the dimension to the specified
.IR dim,
which may be any floating point value between 0 and 3.  Higher dimensions
create more ``chaotic'' images, which require higher resolution output and
a larger FFT mesh size to look good.  If no dimension is specified, 2.15 is
used. To be precise, the initial mesh is filled with gaussian noise of
amplitude (1/f)^(4 -
.IR dim). 
Accordingly, dim=4 would give you pure white noise.
.TP
.BI -adim " ad ascale"
Adds an additional component of noise in the frequency domain with the
dimension 
.IR ad
and amplitude (scaled relative to the first specified dimension) of
.IR ascale.
You can add up to nine additional dimensions, although one or two is almost
certainly enough. Often you don't need any at all. An example might be to
have large rolling hills of 
.IR dim
1.7, with a touch of higher frequencies for a rougher texture:
.nf

gforge -dim 1.7 -adim 2.0 0.1 -pow 1.8

.fi
.TP
.BI -bpfilter " center-freq Q"
.TP
.BI -brfilter " center-freq Q"
Apply a band-pass (bpfilter) and/or band-reject (brfilter) to the frequency
data before the inverse FFT. Center-frequency should be between 0.0 and
1.0. A band-pass filter at f=0 is just a low-pass filter, and at f=1.0 it
is a high-pass filter. Q ("quality factor") = 0.5 is a broad filter, Q=20 is
narrow. Try these options to see their effects.
.TP
.BI -lpfilter " cut-freq Order"
.TP
.BI -hpfilter " cut-freq Order"
Apply a low-pass or high-pass filter to the frequency
data. Cutoff-frequency, between 0 and 1, is the frequency at which the
response drops by half. Order may be any positive value; 1 is a soft
filter, 1000 is a brick-wall filter. 
.TP
.BI -power " exponent"
Raise the elevation powers to the specified exponent, giving a nonlinear
scaling effect, useful for some purposes.
.TP
.BI -limit " min max"
Only relevant if a -power 
.IR exponent
other than 1.0 is selected. Scales terrain to the range [
.IR min -
.IR max
] prior to raising to a power. Default is [0.0 - 1.0]. 
See the sample script/batch file for example usages.
.TP
.BI -crater " density height"
Add craters to the landscape. The optional
.IR density
parameter controls how many there are. The default 1.0 gives you moderate
cratering, but you can specify any positive value. Crater
.IR height
defaults to 1.0, for what I felt were reasonable looking craters. This is
the vertical crater height relative to the underlying landscape scale, and
will need to be changed depending on how you scale the vertical axis of
your heightfield when you render it. As 
.IR height
goes to zero, the craters dwindle in height and disappear.
Crater radius follows a power law distribution.
.TP
.BI -wrapoff
Turn off the default wraparound of craters. The underlying landscape is
always tilable, but with this option it will become farther and farther
from being tilable as more craters are added. I'm not sure if this is actually
useful. Note: cannot be used with the "peak" option.
.TP
.BI -peak " xpos ypos"
You can specify the location of the largest value (highest peak) in the
image as a fraction of the image height and width. For example,
.nf

gforge -dim 1.5 -pow 3 -peak 0.5 0.5 -name mtn.tga

.fi
puts the highest peak in the center of the image. This is most useful for
lower values of
.IR dim
where there is only one or a few broad maxima; at -dim 2 or above it tends
to make less difference. If you don't specify it, it's somewhere random.
.TP
.BI -seed " seed"       
You can give it a random number
.IR seed ,
otherwise it chooses one based on the current time from the system
clock. If you use the same seed, you get the same image every time.
.TP
.BI -name " filename"
If you don't specify it, it's "output.png". Extension determines the output
type. Existing files with that name are overwritten without warning.
.PP
Flags may be abbreviated.
.SH BUGS
.TP
.B tiling 'feature'
Because the FFT operates on periodic functions, the opposite edges of the
image will always match up. If it turns out you want to cover a large area
by tiling these textures together, this is just what you want (ie, it's a
FEATURE... in fact one way to generate useful tilable textures is by taking
the FFT of any interesting picture, filtering a bit, and doing the inverse
transform.) If you don't want periodicity, just generate a larger image
than you need and use some smaller fraction of it. The "-wrapoff" option
applies only to craters crossing the page edge. The "-peak" and "-wrapoff"
options cannot be used simultaneously.
.TP
.B fixed output sizes
The output is always a square grid. If you want a different aspect ratio,
you should use another image processing package to crop or rescale as
appropriate. Unfortunately most of them don't support 16 bits of
precision. John Cristy's ImageMagick 3.6.5 can be compiled to
support 16-bit PNG, and Andreas Dilger's patch to POV-Ray 2.2 supports PNG
input, output, imagemaps, and heightfields. POV-Ray 3.0 supports PNG.
.nf

http://www.wizards.dupont.com/cristy/ImageMagick.html
http://www-mddsp.enel.ucalgary.ca/People/adilger/povray
.fi

.SH "SEE ALSO"
.PD
.BR ppmforge (1),
.BR ppm (5),
.BR povray (1)
.TP 5
[1] 
Voss, Richard F., ``Random Fractal Forgeries,'' in Earnshaw
et. al., Fundamental Algorithms for Computer Graphics, Berlin:
Springer-Verlag, 1985.
.TP
[2]
Peitgen, H.-O., and Saupe, D. eds., The Science Of Fractal Images,
New York: Springer Verlag, 1988.
.TP
[3]
Walker, John, "ppmforge.c" in Jef Poskanzer's PBMPLUS raster toolkit, 1991.
<kelvin@fourmilab.ch>  <http://www.fourmilab.ch/>
.ne 10
.SH AUTHORS
.RS 5
.nf
John Beale                            Heiko Eissfeldt
1745 Webster St.                 <heiko@colossus.escape.de>
Palo Alto, CA 94301
-----------------------------------------------------------------
beale@best.com               http://jump.stanford.edu:8080/~beale
http://www.best.com/~beale   http://chomsky.stanford.edu/~beale

.fi
.RE
.PD
.PP
The gforge program is copyright (c) 1995 by John P. Beale, and the crater
code is copyright (c) 1995 Heiko Eissfeldt. This program comes with 
ABSOLUTELY NO WARRANTY. Permission is granted to redistribute the full 
source code under the terms of the GNU General Public License, version 2.
For more details, see the GPL.

